# -*- coding: utf-8 -*-
"""Predict_condo_price (matplotlib, numpy, pandas, sklearn).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lHXco-wLTFXuk2cHxM-wYa4fmbryzzZE
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# import sys
# 
# # If you're on Colab:
# if 'google.colab' in sys.modules:
#     DATA_PATH = 'https://raw.githubusercontent.com/LambdaSchool/DS-Unit-2-Applied-Modeling/master/data/'
# 
# # If you're working locally:
# else:
#     DATA_PATH = '../data/'

"""# Module Project: Regression

During the guided project, we predicted how much it would cost to buy a condo in New York City.

- **Step 1:** Import `csv` file using wrangle function.
- **Step 2:** Conduct exploratory data analysis (EDA) and plot the relationship between one feature and the target `'price'`.
- **Step 3:** Split data into feature matrix `X` and target vector `y`.
- **Step 4:** Establish the baseline mean absolute error for your dataset.
- **Step 5:** Build and train a `Linearregression` model.
- **Step 6:** Check the mean absolute error of our model on the training data.
- **Step 7:** Extract and print the intercept and coefficient from your `LinearRegression` model.

## I. Wrangle Data
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import mean_absolute_error

# read file, select data needed
def wrangle(filepath):
    df = pd.read_csv(filepath)
    
    # Remove the most extreme 1% prices,
    # the most extreme .1% latitudes, &
    # the most extreme .1% longitudes
    df = df[(df['price'] >= np.percentile(df['price'], 0.5)) & 
            (df['price'] <= np.percentile(df['price'], 99.5)) & 
            (df['latitude'] >= np.percentile(df['latitude'], 0.05)) & 
            (df['latitude'] < np.percentile(df['latitude'], 99.95)) &
            (df['longitude'] >= np.percentile(df['longitude'], 0.05)) & 
            (df['longitude'] <= np.percentile(df['longitude'], 99.95))]
    
    return df

filepath = DATA_PATH + 'apartments/renthop-nyc.csv'

df = wrangle(filepath)
df

"""Make a scatter plot that shows the relationship between one of the numerical features in the dataset and the target `'price'`."""

# scatter plot of feature "number of bathrooms" and target "price"
plt.scatter('bathrooms', 'price', data=df)

"""#  II. Split Data

Choose one feature from the dataset and assign it to feature matrix `X`. Then assign the column `'price'` to the target vector `y`.
"""

# feature X - bathrooms, target Y - price
X = df[['bathrooms']]
y = df['price']

"""# III. Establish Baseline

calculate the baseline mean absolute error.
"""

# mean absolute error of baseline model
baseline_mae = mean_absolute_error(y, [y.mean()] * len(y))
print('Baseline MAE:', baseline_mae)

"""# IV. Build Model

Build and train a `LinearRegression` model named `model` using feature matrix `X` and your target vector `y`.
"""

# LinearRegression model of feature "Bathroom" matrix X and target "Price" vector y

# Step 1: Import predictor class
from sklearn.linear_model import LinearRegression

# Step 2: Instantiate predictor
model = LinearRegression()

# Step 3: Fit predictor on the (training) data
model.fit(X, y)

"""# V. Check Metrics

Calculate the mean absolute error for  model's predictions.
"""

# mean absolute error of LinearRegression model

training_mae = mean_absolute_error(y, model.predict(X))

print('Training MAE:', training_mae)

"""# VI. Communicate Results 

Model makes predictions using an equation that looks like $\texttt{apt price} = \texttt{intercept}~+~\texttt{coefficient}~\times~\texttt{your feature}$. 

Print out the intercept and coefficient associated with `model`.
"""

# Intercept and coefficient of LinearRegression model
print('intercept: ', model.intercept_)
print('coefficient: ', model.coef_[0])